# eNanalyser - Network analysis tool
# Copyright (c) 2025 Manuel Sarullo
# Licensed under the GNU General Public License v3.0 (GPL-3.0)


import re
import json
import requests

# Vulners API => Insert your personal API-KEY
VULNERS_API_KEY = "YOURAPIKEY"
VULNERS_SEARCH_URL = "https://vulners.com/api/v3/search/lucene/"

def normalize_query(text):
    text = text.lower()
    text = re.sub(r'[^a-z0-9.\-_ ]+', '', text)
    return text.strip()

def extract_exploit_info(result):
    src = result.get("_source", {})
    return {
        "title": src.get("title", "No title"),
        "id": src.get("id", result.get("_id", "N/A")),
        "source": result.get("_index", "unknown"),
        "url": src.get("vhref") or src.get("href") or f"https://vulners.com/{result.get('_id', '')}",
        "score": src.get("cvss", {}).get("score", src.get("cvss3", {}).get("cvssV3", {}).get("baseScore", 0)),
        "severity": src.get("cvss", {}).get("severity", src.get("cvss3", {}).get("cvssV3", {}).get("baseSeverity", "N/A")),
        "description": src.get("description") or src.get("flatDescription", "")[:300]
    }


def map_to_product(term):
    """
    Mappa keyword comuni a product:<name> per migliorare i risultati della query.
    """
    mappings = {
        "ssh": "product:openssh",
        "https": "product:openssl",
        "ssl": "product:openssl",
        "apache": "product:apache",
        "nginx": "product:nginx",
        "ftp": "product:vsftpd",
        "samba": "product:samba",
        "dns": "product:bind",
        "windows 10": "microsoft windows",
        "windows": "microsoft windows"
    }
    return mappings.get(term, term)

def search_vulners_api(query, size=10):
    headers = {"X-Vulners-Api-Key": VULNERS_API_KEY}
    payload = {"query": query, "size": size, "fetchDocuments": True}
    try:
        resp = requests.post(VULNERS_SEARCH_URL, json=payload, headers=headers, timeout=5)
        print(f"[DEBUG] Query: '{query}' | Status: {resp.status_code}")
        if resp.status_code == 200:
            data = resp.json()

            docs = data["data"].get("documents", [])
            if not docs:
                docs = data["data"].get("results", [])
            if not docs and "hits" in data["data"]:
                hits = data["data"]["hits"]
                if "hits" in hits:
                    docs = hits["hits"]
            if not docs:
                docs = data["data"].get("search", [])


            #Return docs
            return docs
        else:
            print(f"[!] Vulners API error {resp.status_code}: {resp.text}")
            return []
    except Exception as e:
        print(f"[!] Error vulners callback: {e}")
        return []




def find_exploits_for_device(device):
    exploits = []
    print(f"[DEBUG] Device in ingresso:\n{json.dumps(device, indent=2)}")

    # OS Search
    if "Unknown" not in device["os"]:
        os_query = normalize_query(device["os"])
        os_query_mapped = map_to_product(os_query)
        print(f"[*] Search exploit for OS: {os_query_mapped}")
        results = search_vulners_api(os_query_mapped)
        for r in results:
            exploits.append(extract_exploit_info(r))

    # Service search
    for service in device["services"]:
        service_query = normalize_query(service)
        mapped_keywords = [map_to_product(service_query)]
        print(f"[*] Search exploit for service: {mapped_keywords[0]}")
        for keyword in mapped_keywords:
            results = search_vulners_api(keyword)
            for r in results:
                exploits.append(extract_exploit_info(r))

    # Fallback search
    if not exploits:
        print("[*] No specific exploits found. Searching for generic vulnerabilities...")
        keywords = [
            "default credentials",
            "unauthenticated access",
            "misconfiguration",
            "remote code execution",
            "exposed service"
        ]
        for keyword in keywords:
            results = search_vulners_api(keyword)
            for r in results:
                exploits.append(extract_exploit_info(r))

    #Return exploits
    return exploits
